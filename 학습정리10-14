1. set classpath 에 대하여 설명하시오.
- 자바 가상 머신(JVM)의 클래스 탐색 경로

2.절대 경로와, 상대경로란?
- 절대 경로 : 루트 디렉토리를 시작으로 지정한 경로
  상대 경로 : 현재 디렉토리를 기준으로 지정한 경로

3.  cd  . 관 cd .. 의 차이는?
- cd . : 현재의 경로로 이동
  cd .. : 상위 디렉토리로 이동

4.package 에 대하여 설명해 보시오.
- 패키지란 비슷한 성격의 자바 클래스들을 모아 넣는 자바의 디렉토리이다.

5.정보은닉에 대하여 설명하여 보시오.
- 클래스 내부에서 사용할 변수나 메서드를 private로 선언해서 외부에서 접근하지 못하도록 하는 것을 의미한다.

6.접근제한자에 대하여 설명하시오.
-  public      : 모든 접근을 허용
   protected : 같은 패키지(폴더)에 있는 객체와 상속관계의 객체들만 허용
   default    : 같은 패키지(폴더)에 있는 객체들만 허용
   private    : 현재 객체 내에서만 허용

7. 지역변수에 접근 제한자가 필요없는 이유는?
- 지역변수라는 개념 자체가 한 메소드 또는 반복문, 특정 모듈 안에서 사용되고 사라지는 개념이기 때문에 접근 제한자를 굳이 만들 필요가 없다.

8. 아래의 클래스를 구현하시오.
class Money{
	int money;

	public Money(int money) {
		if (money < 0) {
			System.out.println("잘못된 입력입니다.");
			this.money = 0;
			return ;
		} else {
			this.money = money;
		}
	}
	
	void show() {
		int fifty_thud = money / 50000;
		int ten_thud =  (money % 50000) / 10000;
		int five_thud = (money % 50000 % 10000) / 5000;
		int one_thud =  (money % 50000 % 10000 % 5000) / 1000;
		
		System.out.println("오만원 " + fifty_thud + "장");
		System.out.println("만원 " + ten_thud + "장");
		System.out.println("오천원 " + five_thud + "장");
		System.out.println("천원 " + one_thud + "장");
	}
	
}

Money money = new Money(-126000);
money.show();

출력 
잘못된 입력입니다.
오만원 0장....
오만원 0장....
등등등....

9.아래의 클래스를 구현하시오.

class Employee{
	String name;
	int age;
	String address;
	String team;
	
	Employee(String name, int age, String address, String team) {
		this.name = name;
		this.age = age;
		this.address = address;
		this.team = team;
	}
	
	void printInfo() {
		System.out.println("이름 : " + name);
		System.out.println("나이 : " + age);
		System.out.println("주소 : " + address);
		System.out.println("부서 : " + team);
	}
}

public static void main(String[] args) {
Employee employee = new Employee("홍길동", 19, "서울 뉴욕시", "개발 1팀");
employee.printInfo();
}

출력:
이름 : 홍길동
나이 : 19
주소 : 서울 뉴욕시
부서 : 개발 1팀

10.다음 멤버를 가지고 직사각형을 표현하는 Rectangle 클래스를 작성하라.

public class Rectangle {
	private int x, y, width, height;

	public Rectangle(int x, int y, int width, int height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}
	
	public void show() {
		System.out.println("(" + x + "," + y + ")에서 크기가 " + width + "x" + height + "인 사각형");
	}
	
	public int square() {
		return width * height;
	}
	
	public boolean contains(Rectangle r) {
		boolean bool = false;
		
		if ((this.x < r.x) && ((this.x + this.width) > (r.x + r.width))
			&& (this.y < r.y) && ((this.y + this.height) > (r.y + r.height))) {
			bool = true;
		}
		return bool;
	}

- int 타입의 x, y, width, height 필드 : 사각형을 구성하는 점과 크기 정보
- x, y, width, height 값을 매개변수로 받아 필드를 초기화하는 생성자
- int square() : 사각형 넓이 리턴
- void show() : 사각형의 좌표와 넓이를 화면에 출력
- boolean contains(Rectangle r) : 매개변수로 받은 r이 현 사각형 안에 있으면 true 리턴 (겹치면 안됨. 완전히 안에 있어야 true)
- main() 메소드의 코드와 실행 결과는 다음과 같다.


public static void main(String args[]) {
		Rectangle r = new Rectangle(2, 2, 8, 7);
		Rectangle s = new Rectangle(5, 5, 6, 6);
		Rectangle t = new Rectangle(1, 1, 10, 10);
		
		r.show();
		System.out.println("의 면적은 "+s.square());
		if(t.contains(r)) System.out.println("t는 r을 포함합니다.");
		if(t.contains(s)) System.out.println("t는 s를 포함합니다.");
	}

출력:
(2,2)에서 크기가 8x7인 사각형
s의 면적은 36
t는 r을 포함합니다.
